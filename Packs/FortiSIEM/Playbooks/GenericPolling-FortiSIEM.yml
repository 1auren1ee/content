id: e9f4ac34-76d6-4d2e-825b-5542722755cf
version: 28
vcShouldKeepItemLegacyProdMachine: false
name: GenericPolling-FortiSIEM
description: ""
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: 2df26387-9685-4bac-8bb5-6c53db7b2292
    type: start
    task:
      id: 2df26387-9685-4bac-8bb5-6c53db7b2292
      version: -1
      name: ""
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "3"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": -330
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "1":
    id: "1"
    taskid: e940e91f-0f1f-4cfe-8d9f-a2cbfa565e5b
    type: playbook
    task:
      id: e940e91f-0f1f-4cfe-8d9f-a2cbfa565e5b
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "6"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        simple: ${FortiSIEM.EventsSearchInit.search_id}
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: search_id
      PollingCommandName:
        simple: fortisiem-event-search-status
      Timeout:
        simple: "10"
      dt:
        simple: FortiSIEM.EventsSearchStatus(val.percentage_status!==100).search_id
    separatecontext: true
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 110,
          "y": 440
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "2":
    id: "2"
    taskid: 92efd911-ee13-4c3b-8c67-abe0ed1b6ce6
    type: title
    task:
      id: 92efd911-ee13-4c3b-8c67-abe0ed1b6ce6
      version: -1
      name: Done
      type: title
      iscommand: false
      brand: ""
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 510,
          "y": 850
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "3":
    id: "3"
    taskid: 89f81431-e7d7-4bad-8afe-76235b259714
    type: regular
    task:
      id: 89f81431-e7d7-4bad-8afe-76235b259714
      version: -1
      name: Initialize Search
      description: Initiate search process on events. The events will be retrieve
        according to a constraint which will be determined either by the query argument
        or by the filtering arguments. When using filtering arguments, an 'AND' operator
        will be used between them. If the query argument is filled, it will override
        the values in the filtering arguments.
      script: '|||fortisiem-event-search'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      destAction: {}
      destDomain: {}
      destIpAddr: {}
      destMACAddr: {}
      destUser: {}
      eventId: {}
      eventType: {}
      extended_data: {}
      from_time:
        simple: ${inputs.Start time}
      interval_in_seconds: {}
      limit:
        simple: ${inputs.limit}
      page:
        simple: ${inputs.page}
      polling: {}
      query:
        simple: ${inputs.query}
      reptDevIpAddr: {}
      search_id: {}
      srcDomain: {}
      srcGeoCountry: {}
      srcIpAddr: {}
      srcMACAddr: {}
      timeout_in_seconds: {}
      to_time:
        simple: ${inputs.To Time}
      user: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": -190
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "4":
    id: "4"
    taskid: 95faedbe-d3e7-421d-870c-1c63d40ced92
    type: regular
    task:
      id: 95faedbe-d3e7-421d-870c-1c63d40ced92
      version: -1
      name: fortisiem-event-search-status
      description: Status of search process on events.
      script: '|||fortisiem-event-search-status'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "5"
    scriptarguments:
      search_id:
        simple: ${FortiSIEM.EventsSearchInit.search_id}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 0
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "5":
    id: "5"
    taskid: 6e6cc7e8-30dd-4b68-806d-089058ce818f
    type: condition
    task:
      id: 6e6cc7e8-30dd-4b68-806d-089058ce818f
      version: -1
      name: Fetch Completed?
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "1"
      "yes":
      - "6"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isEqualString
          left:
            value:
              simple: percentage_status
            iscontext: true
          right:
            value:
              simple: "100"
    view: |-
      {
        "position": {
          "x": 450,
          "y": 200
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "6":
    id: "6"
    taskid: e2324f9d-a407-4490-8fa4-0568224a5447
    type: regular
    task:
      id: e2324f9d-a407-4490-8fa4-0568224a5447
      version: -1
      name: Fetch Events
      description: The results of the specified search query.
      script: '|||fortisiem-event-search-results'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "2"
    scriptarguments:
      limit:
        simple: ${inputs.limit}
      page:
        simple: ${inputs.page}
      search_id:
        simple: ${FortiSIEM.EventsSearchInit.search_id}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 520,
          "y": 650
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1245,
        "width": 790,
        "x": 110,
        "y": -330
      }
    }
  }
inputs:
- key: query
  value: {}
  required: false
  description: The query for filtering the relevant events. For example, "eventId=9071234812319593968
    AND eventType='type'". You can retrieve the attributes names  by the naming one
    of the filtering arguments of the command, or by naming the attributes of the
    event that returned in the context output.
  playbookInputQuery: null
- key: limit
  value: {}
  required: false
  description: ""
  playbookInputQuery: null
- key: page
  value: {}
  required: false
  description: ""
  playbookInputQuery: null
- key: Start time
  value: {}
  required: false
  description: From which event receive time filter the events. For example, "3 days
    ago", "1 month", "2019-10-10T12:22:00", "2019-10-10".
  playbookInputQuery: null
- key: To Time
  value: {}
  required: false
  description: Until which event receive time  filter the events. For example, "3
    days ago", "1 month", "2019-10-10T12:22:00", "2019-10-10".
  playbookInputQuery: null
outputs:
- contextPath: FortiSIEM.Event
  description: The events that retrieved from the search query.
  type: unknown
